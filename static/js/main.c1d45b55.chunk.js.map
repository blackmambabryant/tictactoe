{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","key","row","j","push","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","listIsAscending","slice","length","calculateWinner","setState","concat","lastMove","step","status","current","winner","moves","map","move","col","Math","floor","desc","jumpTo","displayedMoves","reverse","handleClick","reverseOrder","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1d45b55.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        key={i}\n      />\n    );\n  }\n\n  render() {\n    const boardSize = 3;\n    let squares = [];\n\n    for (let i = 0; i < boardSize; i++) {\n      let row = [];\n      for (let j = 0; j < boardSize; j++) {\n        row.push(this.renderSquare(i * boardSize + j));\n      }\n      squares.push(\n        <div key={i} className=\"board-row\">\n          {row}\n        </div>\n      );\n    }\n\n    return <div>{squares}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      listIsAscending: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          lastMove: i,\n        },\n      ]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  reverseOrder() {\n    this.setState({\n      listIsAscending: !this.state.listIsAscending,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const lastMove = step.lastMove;\n      const col = 1 + (lastMove % 3);\n      const row = 1 + Math.floor(lastMove % 3);\n      const desc = move\n        ? \"Go to move #\" + move + \" (\" + col + \", \" + row + \")\"\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            className={this.state.stepNumber === move ? \"bold\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    const displayedMoves = this.state.listIsAscending ? moves.reverse() : moves;\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n    return (\n      <div className=\"game\">\n        Welcome to tic tac toe!\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.reverseOrder()}>Switch</button>\n          <ol>{displayedMoves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}